{"version":3,"sources":["Components/Login.js","Components/ViewStory.js","Components/Story.js","App.js","serviceWorker.js","index.js"],"names":["Login","history","useHistory","useState","email","setEmail","password","setPassword","emailError","setemailError","passwordError","setpasswordError","className","type","placeholder","name","onChange","e","target","value","style","color","onClick","preventDefault","axios","post","then","response","push","catch","error","data","message","console","log","ViewStory","state","id","props","userToUpdate","userToupdate","story","componentDidMount","updateView","getStory","a","put","user","get","setState","displayStory","length","map","index","key","title","content","read_counts","this","React","Component","Story","hrx","stories","userid","getStories","printkey","i","displayStories","to","bind","path","exact","App","myCallback","dataFromChild","callbackFromparent","mycallback","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.613bf07c.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport \"../Style/Login.css\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nfunction Login() {\r\n  const history = useHistory();\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [emailError, setemailError] = useState(\"\");\r\n  const [passwordError, setpasswordError] = useState(\"\");\r\n\r\n  const signIn = (e) => {\r\n    e.preventDefault();\r\n    axios\r\n      .post(\"http://pratiliapi.herokuapp.com/api/user/login\", {\r\n        email: email,\r\n        password: password,\r\n      })\r\n      .then((response) => {\r\n        if (response) {\r\n          // console.log(response.data);\r\n\r\n          history.push(\"/story\");\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        if (error.response.data.type === \"email\") {\r\n          setemailError(error.response.data.message);\r\n        } else {\r\n          setpasswordError(error.response.data.message);\r\n        }\r\n        console.log(error.response.data);\r\n      });\r\n  };\r\n\r\n  const register = (e) => {\r\n    e.preventDefault();\r\n    axios\r\n      .post(\"http://pratiliapi.herokuapp.com/api/user/register\", {\r\n        email: email,\r\n        password: password,\r\n      })\r\n      .then((response) => {\r\n        history.push(\"/story\");\r\n        console.log(response.data[0]);\r\n      })\r\n      .catch((error) => {\r\n        setemailError(error.response.data.message);\r\n        console.log(error.response.data.message);\r\n      });\r\n  };\r\n  return (\r\n    <div className=\"login\">\r\n      <div className=\"form-wrapper\">\r\n        <div className=\"heading\">\r\n          <h1>Sign in / Register</h1>\r\n        </div>\r\n        <form>\r\n          <div className=\"username\">\r\n            <input\r\n              type=\"text\"\r\n              className=\"\"\r\n              placeholder=\"Username\"\r\n              name=\"email\"\r\n              onChange={(e) => setEmail(e.target.value)}\r\n            ></input>\r\n          </div>\r\n          <span style={{ color: \"red\" }}>{emailError}</span>\r\n          <div className=\"password\">\r\n            <input\r\n              type=\"password\"\r\n              className=\"\"\r\n              placeholder=\"Password\"\r\n              name=\"password\"\r\n              onChange={(e) => setPassword(e.target.value)}\r\n            ></input>\r\n          </div>\r\n          <span style={{ color: \"red\" }}>{passwordError}</span>\r\n          <div className=\"button\">\r\n            <div className=\"login__signInButton\">\r\n              <button type=\"submit\" onClick={signIn}>\r\n                Sign Up\r\n              </button>\r\n            </div>\r\n            <div className=\"register__signInButton\">\r\n              <button type=\"submit\" onClick={register}>\r\n                Register a New Account\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n","import React from \"react\";\r\nimport axios from \"axios\";\r\nimport \"../Style/ViewStory.css\";\r\n// import { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\r\n\r\nclass ViewStory extends React.Component {\r\n  state = {\r\n    id: this.props.id,\r\n    userToUpdate: this.props.userToupdate,\r\n    story: [],\r\n  };\r\n\r\n  componentDidMount = () => {\r\n    console.log(this.state.id);\r\n    this.updateView();\r\n    this.getStory();\r\n  };\r\n\r\n  updateView = async () => {\r\n    await axios\r\n      .put(`http://pratiliapi.herokuapp.com/api/stories/${this.state.id}`, {\r\n        user: this.state.user,\r\n      })\r\n      .then((response) => {\r\n        console.log(response.data);\r\n      });\r\n  };\r\n\r\n  getStory = async () => {\r\n    await axios\r\n      .get(`http://pratiliapi.herokuapp.com/api/stories/${this.state.id}`)\r\n      .then((response) => {\r\n        const data = response.data;\r\n        this.setState({ story: data });\r\n        console.log(this.state.story[0]);\r\n      })\r\n      .catch(() => {\r\n        console.log(\"error\");\r\n      });\r\n  };\r\n\r\n  displayStory = (story) => {\r\n    if (!story.length) return null;\r\n\r\n    return story.map((story, index) => {\r\n      return (\r\n        <div key={index} className=\"list_story\">\r\n          <h3>{story.title}</h3>\r\n          <p className=\"content\"> {story.content}</p>\r\n          <p className=\"views\">Views {story.read_counts}</p>\r\n        </div>\r\n      );\r\n    });\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"story__box\">\r\n        <div className=\"story\">{this.displayStory(this.state.story)}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ViewStory;\r\n","import React from \"react\";\r\nimport axios from \"axios\";\r\nimport ViewStory from \"./ViewStory.js\";\r\nimport \"../Style/Story.css\";\r\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\r\n\r\nclass Story extends React.Component {\r\n  state = {\r\n    hrx: \"\",\r\n    stories: [],\r\n    userToupdate: this.props.userid,\r\n  };\r\n\r\n  componentDidMount = () => {\r\n    this.getStories();\r\n  };\r\n\r\n  getStories = () => {\r\n    axios\r\n      .get(\"http://pratiliapi.herokuapp.com/api/stories\")\r\n      .then((response) => {\r\n        const data = response.data;\r\n        this.setState({ stories: data });\r\n        console.log(this.state.stories);\r\n      })\r\n      .catch(() => {\r\n        console.log(\"error\");\r\n      });\r\n  };\r\n\r\n  printkey = async (i) => {\r\n    await this.setState({ hrx: i + 1 });\r\n  };\r\n  displayStories = (stories) => {\r\n    if (!stories.length) return null;\r\n\r\n    return stories.map((story, index) => {\r\n      return (\r\n        <div key={index} className=\"list\">\r\n          <h3>{story.title}</h3>\r\n\r\n          <div className=\"footer\">\r\n            <Link to=\"/indi\">\r\n              <button\r\n                className=\"button\"\r\n                type=\"button\"\r\n                onClick={this.printkey.bind(this, index)}\r\n              >\r\n                View\r\n              </button>\r\n            </Link>\r\n          </div>\r\n        </div>\r\n      );\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Router>\r\n        <div className=\"story\">\r\n          <Switch>\r\n            <Route path=\"/story\">\r\n              <div className=\"story__list\">\r\n                {this.displayStories(this.state.stories)}\r\n              </div>\r\n            </Route>\r\n            <Route exact path=\"/indi\">\r\n              <ViewStory\r\n                id={this.state.hrx}\r\n                userToupdate={this.state.userToupdate}\r\n              />\r\n            </Route>\r\n          </Switch>\r\n        </div>\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Story;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Login from \"./Components/Login.js\";\nimport Story from \"./Components/Story.js\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nclass App extends React.Component {\n  state = {\n    userid: \"\",\n  };\n\n  myCallback = async (dataFromChild) => {\n    await this.setState({ userid: dataFromChild });\n  };\n  render() {\n    return (\n      <Router>\n        <div className=\"app\">\n          <Switch>\n            <Route path=\"/story\" userid={this.state.userid}>\n              <Story />\n            </Route>\n            <Route exact path=\"/\" callbackFromparent={this.mycallback}>\n              <Login />\n            </Route>\n          </Switch>\n        </div>\n      </Router>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}